# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI Build

on:
  push:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true # Disable sending .NET CLI telemetry

jobs:
  # MAUI Android Build
  build-android:
    runs-on: windows-latest
    name: Android Build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI Workload
        run: dotnet workload install maui --ignore-failed-sources

      - name: Ensure Directory Exists
        run: |
          if (-Not (Test-Path -Path "bin\Release\net8.0-android")) {
            New-Item -Path "bin\Release\net8.0-android" -ItemType Directory
          }

      - name: Restore Dependencies
        run: dotnet restore Youth.csproj

      - name: Build MAUI Android
        run: dotnet publish Youth.csproj -c Release -f net8.0-android --no-restore

      - name: List Build Artifacts
        run: |
          echo "Listing files in bin\Release\net8.0-android"
          dir bin\Release\net8.0-android

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: market-android-ci-build
          path: bin\Release\net8.0-android\*

  # # MAUI Windows Build
  build-windows:
    runs-on: windows-latest
    name: Windows Build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI Workload
        run: dotnet workload install maui

      - name: Ensure Directory Exists
        run: |
          if (-Not (Test-Path -Path "bin\x64\Release\net8.0-windows10.0.19041.0\win-x64")) {
            New-Item -Path "bin\x64\Release\net8.0-windows10.0.19041.0\win-x64" -ItemType Directory
          }

      - name: Restore Dependencies
        run: dotnet restore Youth.csproj -r win-x64

      - name: Build MAUI Windows
        run: dotnet publish Youth.csproj -c Release -f net8.0-windows10.0.19041.0 -r win-x64 --no-restore /p:PublishReadyToRun=false

      - name: List Build Artifacts
        run: |
          echo "Listing files in bin\x64\Release\net8.0-windows10.0.19041.0\win-x64"
          dir bin\x64\Release\net8.0-windows10.0.19041.0\win-x64

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: market-windows-ci-build
          path: bin\x64\Release\net8.0-windows10.0.19041.0\win-x64\**\*.msix

  # MAUI iOS Build...
  build-ios:
    runs-on: macos-15
    name: iOS Build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI Workload
        run: dotnet workload install maui --ignore-failed-sources

      - name: Ensure Build Directory Exists
        run: mkdir -p bin/Release/net8.0-ios

      - name: Restore Dependencies
        run: dotnet restore Youth.csproj

      - name: Validate and Import Certificate and Provisioning Profile
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          # Unlock Keychain
          security unlock-keychain

          # Validate Secrets
          if [ -z "$IOS_CERTIFICATE" ] || [ -z "$IOS_CERTIFICATE_PASSWORD" ] || [ -z "$IOS_PROVISIONING_PROFILE" ]; then
            echo "Error: Required secrets are missing."
            exit 1
          fi

          # Decode and Import Certificate
          echo "$IOS_CERTIFICATE" | base64 --decode > /tmp/certificate.p12
          security import /tmp/certificate.p12 -A -P "$IOS_CERTIFICATE_PASSWORD" || {
            echo "Error: Failed to import certificate."
            exit 1
          }

          # List Installed Identities
          security find-identity -p codesigning -v

          # Decode and Install Provisioning Profile
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build for iOS Device (arm64)
        run: |
          dotnet publish Youth.csproj -c Release -f net8.0-ios \
          -p:RuntimeIdentifier=ios-arm64 \
          -p:PlatformTarget=arm64 \
          -p:CodesignKey="iPhone Distribution: Specioza Nakate (5N4YN56B77)" \
          -p:ArchiveOnBuild=true \
          -p:GenerateiOSAppBundle=true \
          -p:UseInterpreter=true \
          -p:PublishTrimmed=true \
          -p:MtouchLink=None \
          --no-restore

      # - name: Build for iOS Device (arm64)
      #   run: |
      #     dotnet publish Youth.csproj -c Release -f net8.0-ios \
      #       -p:RuntimeIdentifier=ios-arm64 \
      #       -p:PlatformTarget=arm64 \
      #       -p:CodesignKey="iPhone Distribution: Specioza Nakate (5N4YN56B77)" \
      #       -p:ArchiveOnBuild=true \
      #       -p:GenerateiOSAppBundle=true --no-restore

      - name: List Build Artifacts
        run: ls -alR bin/Release/net8.0-ios

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: market-ios-ci-build
          path: bin/Release/net8.0-ios/**/*.ipa

  # MAUI MacCatalyst Build
  build-mac:
    runs-on: macos-latest
    name: MacCatalyst Build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI Workload
        run: dotnet workload install maui --ignore-failed-sources

      - name: Restore Dependencies
        run: dotnet restore Youth.csproj -r maccatalyst-x64

      - name: Publish MAUI MacCatalyst App
        run: |
          dotnet publish Youth.csproj \
            -c Release \
            -f net8.0-maccatalyst \
            -r maccatalyst-x64 \
            --self-contained true \
            -p:PublishSingleFile=false

      - name: Upload MacCatalyst Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: market-macos-ci-build
          path: bin/Release/net8.0-maccatalyst/maccatalyst-x64/publish/
